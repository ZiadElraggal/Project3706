classdef Application_Measure < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                       matlab.ui.Figure
        ZEApplication_MeasureV10Label  matlab.ui.control.Label
        ReadyLabel                     matlab.ui.control.Label
        STOPButton                     matlab.ui.control.Button
        StartButton                    matlab.ui.control.Button
        SelectedExpirimentDropDown     matlab.ui.control.DropDown
        SelectedExpirimentDropDownLabel  matlab.ui.control.Label
        SelectedDurationHrsEditField   matlab.ui.control.NumericEditField
        SelectedDurationHrsEditFieldLabel  matlab.ui.control.Label
        SelectedIntervalMinEditField   matlab.ui.control.NumericEditField
        SelectedIntervalMinEditFieldLabel  matlab.ui.control.Label
    end

    
    properties (Access = private)
        StopFlag=false; % Description
    end
    
    methods (Access = private)
        
        function current = measureCurrentDC(app,obj)
        
            writeline(obj, "channel.setdmm('141:142', dmm.ATTR_MEAS_FUNCTION, dmm.FUNC_DC_CURRENT)");
            writeline(obj, "channel.setdmm('241:242', dmm.ATTR_MEAS_FUNCTION, dmm.FUNC_DC_CURRENT)");
            writeline(obj, "scan.create('141,142,241,242')")
            writeline(obj, "defbuffer1.capacity = 10 * 16")
            writeline(obj, "trigger.model.initiate()")
            writeline(obj, "waitcomplete()")
            responseString = writeread(obj, "printbuffer(1, defbuffer1.n, defbuffer1)");
            
            valuesStr = strsplit(responseString);
            current = str2double(valuesStr);
            
            overflowThreshold = NaN;
            current(current == overflowThreshold) = NaN;
            invalidIndices = isnan(current);
            current(invalidIndices) = NaN;
        
        end
        
        
        function current = measureCurrentAC(app,obj)
        
            writeline(obj, "channel.setdmm('141:142', dmm.ATTR_MEAS_FUNCTION, dmm.FUNC_AC_CURRENT)");
            writeline(obj, "channel.setdmm('241:242', dmm.ATTR_MEAS_FUNCTION, dmm.FUNC_AC_CURRENT)");
            writeline(obj, "scan.create('141,142,241,242')")
            writeline(obj, "defbuffer1.capacity = 10 * 16")
            writeline(obj, "trigger.model.initiate()")
            writeline(obj, "waitcomplete()")
            responseString = writeread(obj, "printbuffer(1, defbuffer1.n, defbuffer1)");
            
            valuesStr = strsplit(responseString);
            current = str2double(valuesStr);
            
            overflowThreshold = NaN;
            current(current == overflowThreshold) = NaN;
            invalidIndices = isnan(current);
            current(invalidIndices) = NaN;
        
        end
    
        
      % Measurement function
      function temperature = measureTemperature6510(app,obj)
                        
        writeline(obj, "channel.setdmm('101:140', dmm.ATTR_MEAS_FUNCTION, dmm.FUNC_TEMPERATURE)");
        writeline(obj, "channel.setdmm('101:140', dmm.ATTR_MEAS_TRANSDUCER, dmm.TRANS_THERMOCOUPLE)")
        writeline(obj, "channel.setdmm('101:140', dmm.ATTR_MEAS_THERMOCOUPLE, dmm.THERMOCOUPLE_K)")
        writeline(obj, "channel.setdmm('101:140', dmm.ATTR_MEAS_REF_JUNCTION, dmm.REFJUNCT_SIMULATED)")
        writeline(obj, "channel.setdmm('201:240', dmm.ATTR_MEAS_FUNCTION, dmm.FUNC_TEMPERATURE)");
        writeline(obj, "channel.setdmm('201:240', dmm.ATTR_MEAS_TRANSDUCER, dmm.TRANS_THERMOCOUPLE)")
        writeline(obj, "channel.setdmm('201:240', dmm.ATTR_MEAS_THERMOCOUPLE, dmm.THERMOCOUPLE_K)")
        writeline(obj, "channel.setdmm('201:240', dmm.ATTR_MEAS_REF_JUNCTION, dmm.REFJUNCT_SIMULATED)")
        writeline(obj, "scan.create('101:140, 201:240')")
        writeline(obj, "defbuffer1.capacity = 10 * 16")
        writeline(obj, "trigger.model.initiate()")
        writeline(obj, "waitcomplete()")
        responseString= writeread(obj, "printbuffer(1, defbuffer1.n, defbuffer1)");
                        
        valuesStr = strsplit(responseString);
        temperature = str2double(valuesStr);
                        
        overflowThreshold = 9.900000000e+37;
        temperature(temperature == overflowThreshold) = NaN;
        invalidIndices = isnan(temperature);
        temperature(invalidIndices) = NaN;
                        
        % Pad with NaNs to make the length divisible by 11
        remainder = mod(length(temperature), 11);
        if remainder > 0
            padding = 11 - remainder;
            for k = 1:padding
                temperature(end+1) = NaN;
             end
         end
    end
        
                        % Measurement function
    function temperature = measureTemperature3706(app,obj)
        writeline(obj, 'channel.open("allslots")');	  
        writeline(obj, 'reading_buffer = dmm.makebuffer(1000)');				
        writeline(obj, 'dmm.func = dmm.TEMPERATURE');					
        writeline(obj, 'dmm.nplc = 1');
        writeline(obj, 'dmm.transducer = dmm.TEMP_THERMOCOUPLE');			
        writeline(obj, 'dmm.refjunction = dmm.REF_JUNCTION_INTERNAL');	
        writeline(obj, 'dmm.thermocouple = dmm.THERMOCOUPLE_J');			
        writeline(obj, 'dmm.units = dmm.UNITS_CELSIUS');			
        writeline(obj, 'dmm.configure.set("mytemp")');
        writeline(obj, 'dmm.setconfig("4001:4040","mytemp")')	
        writeline(obj, 'scan.create("4001:4040")')
        writeline(obj, 'scan.execute(reading_buffer)')
        responseString1 = writeread(obj, 'printbuffer(1, reading_buffer.n, reading_buffer)');
        writeline(obj, 'dmm.setconfig("3001:3060","mytemp")')	
        writeline(obj, 'scan.create("3001:3060")')
        writeline(obj, 'scan.execute(reading_buffer)')
        responseString2 = writeread(obj, 'printbuffer(1, reading_buffer.n, reading_buffer)');
        writeline(obj, 'dmm.setconfig("6001:6040","mytemp")')
        writeline(obj, 'scan.create("6001:6040")')
        writeline(obj, 'scan.execute(reading_buffer)')
        responseString3 = writeread(obj, 'printbuffer(1, reading_buffer.n, reading_buffer)');
        responseString = append(responseString1, responseString2, responseString3);
                    
        valuesStr = strsplit(responseString);
        temperature = str2double(valuesStr);
                    
        overflowThreshold = 9.900000000e+37;
        temperature(temperature == overflowThreshold) = NaN;
        invalidIndices = isnan(temperature);
        temperature(invalidIndices) = NaN;
                    
         % Pad with NaNs to make the length divisible by 11
         remainder = mod(length(temperature), 11);
         if remainder > 0
            padding = 11 - remainder;
            for k = 1:padding
                temperature(end+1) = NaN;
             end
        end
    end
end

    % Callbacks that handle component events
    methods (Access = private)

        % Value changed function: SelectedIntervalMinEditField
        function SelectedIntervalMinEditFieldValueChanged(app, event)
            value = app.SelectedIntervalMinEditField.Value;
           
        end

        % Value changed function: SelectedDurationHrsEditField
        function SelectedDurationHrsEditFieldValueChanged(app, event)
            value = app.SelectedDurationHrsEditField.Value;
        end

        % Value changed function: SelectedExpirimentDropDown
        function SelectedExpirimentDropDownValueChanged(app, event)
            value = app.SelectedExpirimentDropDown.Value;
        end

        % Clicked callback: SelectedExpirimentDropDown
        function SelectedExpirimentDropDownClicked(app, event)
            item = event.InteractionInformation.Item;
        end

        % Button pushed function: StartButton
        function StartButtonPushed(app, event)
            switch app.SelectedExpirimentDropDown.Value
                case "Current_DC_6510"
                   % Connect to the Device and Setup Variables
                    clear obj;
                    name = visadevlist;
                    resourceName="KEITHLEY INSTRUMENTS";
                    [rows,~]=size(name);
                    for i=rows
                        if name{i,3}==resourceName
                            objName=name{i,1};
                        else
                            disp("No Keithley Device is Connected")
                        end
                    end
                    obj = visadev(objName);
                    Currents = 4;
                    Intervalmin = app.SelectedIntervalMinEditField.Value;
                    Durationhrs = app.SelectedDurationHrsEditField.Value;
                    app.StopFlag=false;
                    app.ReadyLabel.Text="Running..";
                    app.ReadyLabel.BackgroundColor="yellow";
                    ChannelNames = {'141','142','241','242'};
                    

                    % Instrument Setup
                    writeline(obj, "reset()")
                    
                    % Data Collection Loop
                    CurrentData = [];
                    timestamps = {}; 
                    startTime = tic;
                    while toc(startTime) < (Durationhrs * 3600) && ~app.StopFlag
                        x = datetime('now', 'Format', 'HH:mm:ss');
                        CurrentMeasurements = measureCurrentDC(app,obj);
                        
                        timestamps{end+1, 1} = x; 
                    
                        CurrentData = [CurrentData; CurrentMeasurements];
                    
                        headers = [{'Timestamp'}, ChannelNames];
                        % Write Headers
                        writecell(headers, "CurrentData_TEMPORARY.xlsx", 'Range', 'A1');
                    
                        % Write Timestamps
                        writecell(timestamps, "CurrentData_TEMPORARY.xlsx", 'Range', 'A2');
                    
                    
                        % Write Current Data with timestamp in the filename
                        writematrix(CurrentData, "CurrentData_TEMPORARY.xlsx", 'Range', 'B2');
                        pause(Intervalmin * 60)
                    
                    end
                    
                    
                    % Set Headers
                    headers = [{'Timestamp'}, ChannelNames];
                    filename = strcat("CurrentData", "_", datestr(now,'dd-mm-yyyy_HH.MM.SS'), '.xlsx');
                    % Write Headers
                    writecell(headers, filename, 'Range', 'A1');
                    
                    % Write Timestamps
                    writecell(timestamps, filename, 'Range', 'A2');
                    
                    
                    % Write Current Data with timestamp in the filename
                    writematrix(CurrentData, filename, 'Range', 'B2');
                    
                    
                    % Cleanup
                    delete(obj);
                    delete("CurrentData_TEMPORARY.xlsx")
                    app.ReadyLabel.Text="Ready";
                    app.ReadyLabel.BackgroundColor=[0.03,0.57,0.03];





                case "Temperature_6510"
                    % Initialize parameters
                    clear obj;
                    name = visadevlist;
                    resourceName="KEITHLEY INSTRUMENTS";
                    [rows,~]=size(name);
                    for i=rows
                        if name{i,3}==resourceName
                            objName=name{i,1};
                        else
                            disp("No Keithley Device is Connected")
                        end
                    end
                    obj = visadev(objName);
                    obj.Timeout=20;
                    numTemps = 132;
                    Intervalmin = app.SelectedIntervalMinEditField.Value;
                    Durationhrs = app.SelectedDurationHrsEditField.Value;
                    pipeNames = {'CC1-', 'CIDS11-', 'CIDS21-', 'CIDS31-', 'CC2-', 'CIDS12-', 'CIDS22-', 'CIDS32-'};
                    numPipes = numel(pipeNames);
                    app.StopFlag=false;
                    app.ReadyLabel.Text="Running..";
                    app.ReadyLabel.BackgroundColor="yellow";
                    
                    % Generate point names
                    pointNames = cell(1, numTemps);
                    for n = 1:numPipes
                        for i = 1:11
                            pointNames{(n-1)*11 + i} = [pipeNames{n}, num2str(i)];
                        end
                    end
                    
                    % Initialize data storage
                    temperatureData = cell(1, 0);
                    timestamps = NaT(0, 1);
                    
                    % Instrument setup
                    writeline(obj, 'reset()');
                    
                    % Data collection loop
                    startTime = tic;
                    while toc(startTime) < (Durationhrs * 3600) && ~app.StopFlag
                        i = length(temperatureData) + 1;
                        x = datetime('now', 'Format', 'HH:mm:ss');
                        temperatureMeasurements = measureTemperature6510(app,obj);
                    
                        temperatureData{i} = temperatureMeasurements;
                        timestamps(i, 1) = x;
                        
                        minLength = min([length(pointNames), numel(temperatureData), length(timestamps)]);
                        numGraphs = ceil(numel(temperatureData) / 11);
                    
                        for graphIndex = 1:numGraphs
                            figure;
                            for n = 1:numPipes
                                subplot(3, 4, n);
                                hold on;
                                pipeIndices = (n-1)*11 + 1:n*11;
                    
                                for i = (graphIndex-1)*11 + 1 : min(graphIndex*11, minLength)
                                    currentTimestamp = timestamps(i);
                    
                                    if numel(temperatureData{i}) >= max(pipeIndices)
                                        color = hsv2rgb([n/numPipes, 1, 1]);
                                        scatter(repmat(currentTimestamp, 1, length(pipeIndices)), temperatureData{i}(pipeIndices),"MarkerEdgeColor",color,"Marker", '*', 'DisplayName', '');
                    
                                        for j = 1:length(pipeIndices)
                                            dataIndex = pipeIndices(j);
                    
                                            if dataIndex <= numTemps
                                                text(currentTimestamp, temperatureData{i}(dataIndex), [pointNames{dataIndex}, '', ''], 'FontSize', 8, 'HorizontalAlignment', 'right');
                                            end
                                        end
                                    end
                                end
                    
                                hold off;
                                xlabel('Timestamp');
                                ylabel('Temperature (Celsius)');
                                title(['Temperature Measurements - ', pipeNames{n}]);
                                grid on;
                            end
                            saveas(gcf,"TempData_6510_TEMPORARY.fig")
                            dataCell = cell(numel(temperatureData), 0);
                            
                            for i = 1:numel(temperatureData)
                                data = temperatureData{i};
                                tempCell = cell(11, numel(pipeNames));
                                for j = 1:numel(pipeNames)
                                    startIdx = (j - 1) * 11 + 1;
                                    endIdx = j * 11;
                                    tempCell(:, j) = num2cell(data(startIdx:endIdx));
                                end
                                dataCell{i} = tempCell;
                            end
                            
                            dataTable = table(timestamps, 'VariableNames', {'Timestamp'});
                            for i = 1:numel(pipeNames)
                                for j = 1:11
                                    varName = strcat(pipeNames{i}, num2str(j));
                                    dataColumn = nan(numel(temperatureData), 1);
                                    for k = 1:numel(temperatureData)
                                        dataColumn(k) = dataCell{k}{j, i};
                                    end
                                    dataTable.(varName) = dataColumn;
                                end
                            end
                            
                            filenameTEMP = strcat("TempData_6510_TEMPORARY",'.xlsx');
                            writetable(dataTable, filenameTEMP);
                            pause(Intervalmin * 60);
                            close(gcf);
                        end
                    end
                    
                    % Clean up
                    delete(obj);
                    
                    % Write data to Excel file
                    
                    % Initialize cell array to store data
                    dataCell = cell(numel(temperatureData), 0);
                    
                    % Organize data into cell array with headers
                    for i = 1:numel(temperatureData)
                        data = temperatureData{i};
                        tempCell = cell(11, numel(pipeNames));
                        for j = 1:numel(pipeNames)
                            startIdx = (j - 1) * 11 + 1;
                            endIdx = j * 11;
                            tempCell(:, j) = num2cell(data(startIdx:endIdx));
                        end
                        dataCell{i} = tempCell;
                    end
                    
                    % Create a table to store the data
                    dataTable = table(timestamps, 'VariableNames', {'Timestamp'});
                    for i = 1:numel(pipeNames)
                        for j = 1:11
                            varName = strcat(pipeNames{i}, num2str(j));
                            dataColumn = nan(numel(temperatureData), 1);
                            for k = 1:numel(temperatureData)
                                dataColumn(k) = dataCell{k}{j, i};
                            end
                            dataTable.(varName) = dataColumn;
                        end
                    end
                    
                    % Write data to Excel file
                    filename = strcat("TempData", "_", datestr(now,'dd-mm-yyyy_HH.MM.SS'), '.xlsx');
                    writetable(dataTable, filename);
                    
                    
                    
                    % Determine minimum length for plotting
                    minLength = min([length(pointNames), numel(temperatureData), length(timestamps)]);
                    numGraphs = ceil(numel(temperatureData) / 11);
                    
                    % Plotting loop
                    for graphIndex = 1:numGraphs
                        figure;
                        for n = 1:numPipes
                            subplot(3, 4, n);
                            hold on;
                            pipeIndices = (n-1)*11 + 1:n*11;
                    
                            for i = (graphIndex-1)*11 + 1 : min(graphIndex*11, minLength)
                                currentTimestamp = timestamps(i);
                    
                                if numel(temperatureData{i}) >= max(pipeIndices)
                                    color = hsv2rgb([n/numPipes, 1, 1]);
                                    scatter(repmat(currentTimestamp, 1, length(pipeIndices)), temperatureData{i}(pipeIndices),"MarkerEdgeColor",color,"Marker", '*', 'DisplayName', '');
                    
                                    for j = 1:length(pipeIndices)
                                        dataIndex = pipeIndices(j);
                    
                                        if dataIndex <= numTemps
                                            text(currentTimestamp, temperatureData{i}(dataIndex), [pointNames{dataIndex}, '', ''], 'FontSize', 8, 'HorizontalAlignment', 'right');
                                        end
                                    end
                                end
                            end
                    
                            hold off;
                            xlabel('Timestamp');
                            ylabel('Temperature (Celsius)');
                            title(['Temperature Measurements - ', pipeNames{n}]);
                            grid on;
                        end
                        saveas(gcf, strcat("TempGraph_", "_", datestr(now, 'dd-mm-yyyy_HH.MM.SS'), '.fig'));
                    end
                    %Deleting Temporary Data
                    delete("TempData_6510_TEMPORARY.fig")
                    delete("TempData_6510_TEMPORARY.xlsx")
                    app.ReadyLabel.Text="Ready";
                    app.ReadyLabel.BackgroundColor=[0.03,0.57,0.03];

                case "Temperature_3706"
                % Initialize parameters
                clear obj;
                name = visadevlist;
                resourceName="KEITHLEY INSTRUMENTS";
                [rows,~]=size(name);
                for i=rows
                    if name{i,3}==resourceName
                        objName=name{i,1};
                    else
                        disp("No Keithley Device is Connected")
                    end
                end
                obj = visadev(objName);
                obj.Timeout=20;
                numTemps = 132;
                Intervalmin = app.SelectedIntervalMinEditField.Value;
                Durationhrs = app.SelectedDurationHrsEditField.Value;
                app.StopFlag=false;
                app.ReadyLabel.Text="Running..";
                app.ReadyLabel.BackgroundColor="yellow";
                pipeNames = {'CC1-', 'CIDS11-', 'CIDS21-', 'CIDS31-', 'CC2-', 'CIDS12-', 'CIDS22-', 'CIDS32-', 'CC3-', 'CIDS13-', 'CIDS23-', 'CIDS33-'};
                numPipes = numel(pipeNames);
                
                % Generate point names
                pointNames = cell(1, numTemps);
                for n = 1:numPipes
                    for i = 1:11
                        pointNames{(n-1)*11 + i} = [pipeNames{n}, num2str(i)];
                    end
                end
                
                % Initialize data storage
                temperatureData = cell(1, 0);
                timestamps = NaT(0, 1);
                
                % Instrument setup
                writeline(obj, 'reset()');
                
                % Data collection loop
                startTime = tic;
                while toc(startTime) < (Durationhrs * 3600) && ~app.StopFlag
                    i = length(temperatureData) + 1;
                    x = datetime('now', 'Format', 'HH:mm:ss');
                    temperatureMeasurements = measureTemperature3706(app,obj);
                
                    temperatureData{i} = temperatureMeasurements;
                    timestamps(i, 1) = x;
                    
                    minLength = min([length(pointNames), numel(temperatureData), length(timestamps)]);
                    numGraphs = ceil(numel(temperatureData) / 11);
                
                    for graphIndex = 1:numGraphs
                        figure;
                        for n = 1:numPipes
                            subplot(3, 4, n);
                            hold on;
                            pipeIndices = (n-1)*11 + 1:n*11;
                
                            for i = (graphIndex-1)*11 + 1 : min(graphIndex*11, minLength)
                                currentTimestamp = timestamps(i);
                
                                if numel(temperatureData{i}) >= max(pipeIndices)
                                    color = hsv2rgb([n/numPipes, 1, 1]);
                                    scatter(repmat(currentTimestamp, 1, length(pipeIndices)), temperatureData{i}(pipeIndices),"MarkerEdgeColor",color,"Marker", '*', 'DisplayName', '');
                
                                    for j = 1:length(pipeIndices)
                                        dataIndex = pipeIndices(j);
                
                                        if dataIndex <= numTemps
                                            text(currentTimestamp, temperatureData{i}(dataIndex), [pointNames{dataIndex}, '', ''], 'FontSize', 8, 'HorizontalAlignment', 'right');
                                        end
                                    end
                                end
                            end
                
                            hold off;
                            xlabel('Timestamp');
                            ylabel('Temperature (Celsius)');
                            title(['Temperature Measurements - ', pipeNames{n}]);
                            grid on;
                        end
                        saveas(gcf,"TempData_3706_TEMPORARY.fig")
                        dataCell = cell(numel(temperatureData), 0);
                        
                        for i = 1:numel(temperatureData)
                            data = temperatureData{i};
                            tempCell = cell(11, numel(pipeNames));
                            for j = 1:numel(pipeNames)
                                startIdx = (j - 1) * 11 + 1;
                                endIdx = j * 11;
                                tempCell(:, j) = num2cell(data(startIdx:endIdx));
                            end
                            dataCell{i} = tempCell;
                        end
                        
                        dataTable = table(timestamps, 'VariableNames', {'Timestamp'});
                        for i = 1:numel(pipeNames)
                            for j = 1:11
                                varName = strcat(pipeNames{i}, num2str(j));
                                dataColumn = nan(numel(temperatureData), 1);
                                for k = 1:numel(temperatureData)
                                    dataColumn(k) = dataCell{k}{j, i};
                                end
                                dataTable.(varName) = dataColumn;
                            end
                        end
                        
                        filenameTEMP = strcat("TempData_3706_TEMPORARY",'.xlsx');
                        writetable(dataTable, filenameTEMP);
                        pause(Intervalmin * 60);
                        close(gcf);
                    end
                end
                
                
                % Clean up
                delete(obj);
                
                % Write data to Excel file
                
                % Initialize cell array to store data
                dataCell = cell(numel(temperatureData), 0);
                
                % Organize data into cell array with headers
                for i = 1:numel(temperatureData)
                    data = temperatureData{i};
                    tempCell = cell(11, numel(pipeNames));
                    for j = 1:numel(pipeNames)
                        startIdx = (j - 1) * 11 + 1;
                        endIdx = j * 11;
                        tempCell(:, j) = num2cell(data(startIdx:endIdx));
                    end
                    dataCell{i} = tempCell;
                end
                
                % Create a table to store the data
                dataTable = table(timestamps, 'VariableNames', {'Timestamp'});
                for i = 1:numel(pipeNames)
                    for j = 1:11
                        varName = strcat(pipeNames{i}, num2str(j));
                        dataColumn = nan(numel(temperatureData), 1);
                        for k = 1:numel(temperatureData)
                            dataColumn(k) = dataCell{k}{j, i};
                        end
                        dataTable.(varName) = dataColumn;
                    end
                end
                
                % Write data to Excel file
                filename = strcat("TempData", "_", datestr(now,'dd-mm-yyyy_HH.MM.SS'), '.xlsx');
                writetable(dataTable, filename);
                
                
                
                % Determine minimum length for plotting
                minLength = min([length(pointNames), numel(temperatureData), length(timestamps)]);
                numGraphs = ceil(numel(temperatureData) / 11);
                
                % Plotting loop
                for graphIndex = 1:numGraphs
                    figure;
                    for n = 1:numPipes
                        subplot(3, 4, n);
                        hold on;
                        pipeIndices = (n-1)*11 + 1:n*11;
                
                        for i = (graphIndex-1)*11 + 1 : min(graphIndex*11, minLength)
                            currentTimestamp = timestamps(i);
                
                            if numel(temperatureData{i}) >= max(pipeIndices)
                                color = hsv2rgb([n/numPipes, 1, 1]);
                                scatter(repmat(currentTimestamp, 1, length(pipeIndices)), temperatureData{i}(pipeIndices),"MarkerEdgeColor",color,"Marker", '*', 'DisplayName', '');
                
                                for j = 1:length(pipeIndices)
                                    dataIndex = pipeIndices(j);
                
                                    if dataIndex <= numTemps
                                        text(currentTimestamp, temperatureData{i}(dataIndex), [pointNames{dataIndex}, '', ''], 'FontSize', 8, 'HorizontalAlignment', 'right');
                                    end
                                end
                            end
                        end
                
                        hold off;
                        xlabel('Timestamp');
                        ylabel('Temperature (Celsius)');
                        title(['Temperature Measurements - ', pipeNames{n}]);
                        grid on;
                    end
                    saveas(gcf, strcat("TempGraph_", "_", datestr(now, 'dd-mm-yyyy_HH.MM.SS'), '.fig'));
                end
                %Deleting Temporary Data
                delete("TempData_3706_TEMPORARY.fig")
                delete("TempData_3706_TEMPORARY.xlsx")
                app.ReadyLabel.Text="Ready";
                app.ReadyLabel.BackgroundColor=[0.03,0.57,0.03]



                   case "Current_AC_6510"
                   % Connect to the Device and Setup Variables
                    clear obj;
                    name = visadevlist;
                    resourceName="KEITHLEY INSTRUMENTS";
                    [rows,~]=size(name);
                    for i=rows
                        if name{i,3}==resourceName
                            objName=name{i,1};
                        else
                            disp("No Keithley Device is Connected")
                        end
                    end
                    obj = visadev(objName);
                    Currents = 4;
                    Intervalmin = app.SelectedIntervalMinEditField.Value;
                    Durationhrs = app.SelectedDurationHrsEditField.Value;
                    app.StopFlag=false;
                    app.ReadyLabel.Text="Running..";
                    app.ReadyLabel.BackgroundColor="yellow";
                    ChannelNames = {'141','142','241','242'};
                    

                    % Instrument Setup
                    writeline(obj, "reset()")
                    
                    % Data Collection Loop
                    CurrentData = [];
                    timestamps = {}; 
                    startTime = tic;
                    while toc(startTime) < (Durationhrs * 3600) && ~app.StopFlag
                        x = datetime('now', 'Format', 'HH:mm:ss');
                        CurrentMeasurements = measureCurrentAC(app,obj);
                        
                        timestamps{end+1, 1} = x; 
                    
                        CurrentData = [CurrentData; Curre60
                            easurements];
                    
                        headers = [{'Timestamp'}, ChannelNames];
                        % Write Headers
                        writecell(headers, "CurrentData_TEMPORARY.xlsx", 'Range', 'A1');
                    
                        % Write Timestamps
                        writecell(timestamps, "CurrentData_TEMPORARY.xlsx", 'Range', 'A2');
                    
                    
                        % Write Current Data with timestamp in the filename
                        writematrix(CurrentData, "CurrentData_TEMPORARY.xlsx", 'Range', 'B2');
                        pause(Intervalmin * 60)
                    
                    end
                    
                    
                    % Set Headers
                    headers = [{'Timestamp'}, ChannelNames];
                    filename = strcat("CurrentData", "_", datestr(now,'dd-mm-yyyy_HH.MM.SS'), '.xlsx');
                    % Write Headers
                    writecell(headers, filename, 'Range', 'A1');
                    
                    % Write Timestamps
                    writecell(timestamps, filename, 'Range', 'A2');
                    
                    
                    % Write Current Data with timestamp in the filename
                    writematrix(CurrentData, filename, 'Range', 'B2');
                    
                    
                    % Cleanup
                    delete(obj);
                    delete("CurrentData_TEMPORARY.xlsx")
                    app.ReadyLabel.Text="Ready";
                    app.ReadyLabel.BackgroundColor=[0.03,0.57,0.03];

            end
        end

        % Button pushed function: STOPButton
        function STOPButtonPushed(app, event)
         app.StopFlag=true;
         app.ReadyLabel.Text="Stopping....";
         app.ReadyLabel.BackgroundColor="red";
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 696 480];
            app.UIFigure.Name = 'MATLAB App';

            % Create SelectedIntervalMinEditFieldLabel
            app.SelectedIntervalMinEditFieldLabel = uilabel(app.UIFigure);
            app.SelectedIntervalMinEditFieldLabel.HorizontalAlignment = 'right';
            app.SelectedIntervalMinEditFieldLabel.FontWeight = 'bold';
            app.SelectedIntervalMinEditFieldLabel.Position = [35 333 124 22];
            app.SelectedIntervalMinEditFieldLabel.Text = 'Selected Interval Min';

            % Create SelectedIntervalMinEditField
            app.SelectedIntervalMinEditField = uieditfield(app.UIFigure, 'numeric');
            app.SelectedIntervalMinEditField.ValueChangedFcn = createCallbackFcn(app, @SelectedIntervalMinEditFieldValueChanged, true);
            app.SelectedIntervalMinEditField.FontWeight = 'bold';
            app.SelectedIntervalMinEditField.Position = [170 314 69 60];

            % Create SelectedDurationHrsEditFieldLabel
            app.SelectedDurationHrsEditFieldLabel = uilabel(app.UIFigure);
            app.SelectedDurationHrsEditFieldLabel.HorizontalAlignment = 'right';
            app.SelectedDurationHrsEditFieldLabel.FontWeight = 'bold';
            app.SelectedDurationHrsEditFieldLabel.Position = [440 333 130 22];
            app.SelectedDurationHrsEditFieldLabel.Text = 'Selected Duration Hrs';

            % Create SelectedDurationHrsEditField
            app.SelectedDurationHrsEditField = uieditfield(app.UIFigure, 'numeric');
            app.SelectedDurationHrsEditField.ValueChangedFcn = createCallbackFcn(app, @SelectedDurationHrsEditFieldValueChanged, true);
            app.SelectedDurationHrsEditField.FontWeight = 'bold';
            app.SelectedDurationHrsEditField.Position = [581 314 69 60];

            % Create SelectedExpirimentDropDownLabel
            app.SelectedExpirimentDropDownLabel = uilabel(app.UIFigure);
            app.SelectedExpirimentDropDownLabel.HorizontalAlignment = 'right';
            app.SelectedExpirimentDropDownLabel.FontWeight = 'bold';
            app.SelectedExpirimentDropDownLabel.Position = [192 425 120 22];
            app.SelectedExpirimentDropDownLabel.Text = 'Selected Expiriment';

            % Create SelectedExpirimentDropDown
            app.SelectedExpirimentDropDown = uidropdown(app.UIFigure);
            app.SelectedExpirimentDropDown.Items = {'Current_DC_6510', 'Current_AC_6510', 'Temperature_6510', 'Temperature_3706'};
            app.SelectedExpirimentDropDown.ValueChangedFcn = createCallbackFcn(app, @SelectedExpirimentDropDownValueChanged, true);
            app.SelectedExpirimentDropDown.FontWeight = 'bold';
            app.SelectedExpirimentDropDown.ClickedFcn = createCallbackFcn(app, @SelectedExpirimentDropDownClicked, true);
            app.SelectedExpirimentDropDown.Position = [327 403 172 66];
            app.SelectedExpirimentDropDown.Value = 'Current_DC_6510';

            % Create StartButton
            app.StartButton = uibutton(app.UIFigure, 'push');
            app.StartButton.ButtonPushedFcn = createCallbackFcn(app, @StartButtonPushed, true);
            app.StartButton.FontSize = 24;
            app.StartButton.FontWeight = 'bold';
            app.StartButton.Position = [292 77 162 101];
            app.StartButton.Text = 'Start';

            % Create STOPButton
            app.STOPButton = uibutton(app.UIFigure, 'push');
            app.STOPButton.ButtonPushedFcn = createCallbackFcn(app, @STOPButtonPushed, true);
            app.STOPButton.BackgroundColor = [0.9412 0.9412 0.9412];
            app.STOPButton.FontSize = 14;
            app.STOPButton.FontWeight = 'bold';
            app.STOPButton.FontColor = [0.8196 0.0824 0.0824];
            app.STOPButton.Position = [515 88 93 61];
            app.STOPButton.Text = 'STOP';

            % Create ReadyLabel
            app.ReadyLabel = uilabel(app.UIFigure);
            app.ReadyLabel.BackgroundColor = [0.0314 0.5686 0.0314];
            app.ReadyLabel.HorizontalAlignment = 'center';
            app.ReadyLabel.FontSize = 18;
            app.ReadyLabel.FontWeight = 'bold';
            app.ReadyLabel.Position = [278 18 191 45];
            app.ReadyLabel.Text = 'Ready';

            % Create ZEApplication_MeasureV10Label
            app.ZEApplication_MeasureV10Label = uilabel(app.UIFigure);
            app.ZEApplication_MeasureV10Label.FontSize = 9;
            app.ZEApplication_MeasureV10Label.Position = [14 1 145 27];
            app.ZEApplication_MeasureV10Label.Text = 'ZE-Application_Measure V.1.0';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = Application_Measure

            runningApp = getRunningApp(app);

            % Check for running singleton app
            if isempty(runningApp)

                % Create UIFigure and components
                createComponents(app)

                % Register the app with App Designer
                registerApp(app, app.UIFigure)
            else

                % Focus the running singleton app
                figure(runningApp.UIFigure)

                app = runningApp;
            end

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end